package kck.SnakeConsole;

import com.googlecode.lanterna.TerminalSize;
import com.googlecode.lanterna.TextColor;
import com.googlecode.lanterna.graphics.TextGraphics;
import com.googlecode.lanterna.gui2.*;
import com.googlecode.lanterna.input.KeyStroke;
import com.googlecode.lanterna.screen.Screen;
import com.googlecode.lanterna.screen.TerminalScreen;
import com.googlecode.lanterna.terminal.DefaultTerminalFactory;
import com.googlecode.lanterna.terminal.Terminal;

import java.awt.event.KeyEvent;
import java.util.EventListener;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;
import org.jnativehook.keyboard.NativeKeyEvent;
import org.jnativehook.keyboard.NativeKeyListener;

import java.io.IOException;


public class Game implements NativeKeyListener{
	
	public static int WIDTH = 20, HEIGHT = 20;
	public static int INTERVAL = 300;
	static char direction = 'D';
	private Terminal terminal;
	private Screen screen;
	private TextGraphics tg;
	private KeyStroke keyPressed;
	
	public Game() throws IOException  {
		
		/*
		 * JNativeHook settings to disable mouse and key logs
		 */
		// Clear previous logging configurations.
		LogManager.getLogManager().reset();

		// Get the logger for "org.jnativehook" and set the level to off.
		Logger logger = Logger.getLogger(GlobalScreen.class.getPackage().getName());
		logger.setLevel(Level.OFF);
		
		/*
		 * Terminal setup
		 */
        this.terminal = new DefaultTerminalFactory().createTerminal();
        this.screen = new TerminalScreen(terminal);
        tg = screen.newTextGraphics();
        screen.startScreen();
        //this.printBoard();
        
        screen.refresh();
	}
	
	public void printBoard(char[][] tab) {
		for (int i=0; i<tab.length; i++) {
			for (int j=0; j<tab[0].length; j++) {
				tg.setCharacter(i, j, tab[i][j]);
			}
		}
	}
	
    public static void main( String[] args ) throws IOException, InterruptedException {
    	
    	//creating a NativeHook which allows to add KeyListener from JNativeHook library
    	Game g = new Game();
    	try {
    		GlobalScreen.registerNativeHook();
    	}
    	catch (NativeHookException ex) {
    		System.err.println("There was a problem registering the native hook.");
    		System.err.println(ex.getMessage());
    		System.exit(1);
   		}
    	GlobalScreen.addNativeKeyListener((NativeKeyListener) g);
    	
		//Game
		Board b = new Board();
		boolean gameRunning = true;
		
		while (gameRunning) {
		Thread.sleep(INTERVAL);						  	
			g.screen.clear();				
			//b.printBoard();
			switch(Game.direction) {
			case 'A':
				gameRunning = b.moveLeft();
				break;
			case 'D':
				gameRunning = b.moveRight();
				break;
			case 'S':
				gameRunning = b.moveDown();
				break;
			case 'W':
				gameRunning = b.moveUp();
				break;
			}
			
			g.printBoard(b.getCharBoard());
			g.screen.refresh();
 		
		}
		g.tg.putString(5, 10, "Game over!");
		g.screen.refresh();

		
    }
    
  //KeyListener methods generated by JNativeHook Library
  	@Override
  	public void nativeKeyPressed(NativeKeyEvent e) {
  		char dirTmp = NativeKeyEvent.getKeyText(e.getKeyCode()).charAt(0);
  		if (dirTmp == 'A' || dirTmp == 'S' || dirTmp == 'D' || dirTmp == 'W') {
  			direction = dirTmp;
  		}
  		
  	}
  	@Override
  	public void nativeKeyReleased(NativeKeyEvent e) {
  		// TODO Auto-generated method stub
  		
  	}
  	@Override
  	public void nativeKeyTyped(NativeKeyEvent e) {
  		// TODO Auto-generated method stub
  		
  	}
    
}
